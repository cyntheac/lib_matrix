#include "s21_matrix.h"

// checkmk tests_s21_decimal > tests_s21_decimal.c
// gcc -Wall -Werror -Wextra -pedantic -std=c11 s21_*.c tests_*.c -lcheck

// #suit s21_
// #tcase s21_
// #test test_s21_

/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
#tcase s21_eq_matrix
#test test_s21_eq_matrix_01
matrix_t matrix;
matrix_t matrix2;
s21_create_matrix(3, 3, &matrix);
s21_create_matrix(3, 3, &matrix2);
for (int i = 0; i < 3; i++) {
    for(int j = 0; j < 3; j++) {
        matrix.matrix[i][j] = i + j;
        matrix2.matrix[i][j] = i + j;
    }
}
int res = s21_eq_matrix(&matrix, &matrix2);
s21_remove_matrix(&matrix);
s21_remove_matrix(&matrix2);
fail_unless(res == 1);

#test test_s21_eq_matrix_02
matrix_t matrix;
matrix_t matrix2;
s21_create_matrix(3, 3, &matrix);
s21_create_matrix(3, 3, &matrix2);
for (int i = 0; i < 3; i++) {
    for(int j = 0; j < 3; j++) {
        matrix.matrix[i][j] = i + j;
        matrix2.matrix[i][j] = i - j;
    }
}
int res = s21_eq_matrix(&matrix, &matrix2);
s21_remove_matrix(&matrix);
s21_remove_matrix(&matrix2);
fail_unless(res == 0);

#test test_s21_eq_matrix_03
matrix_t matrix;
matrix_t matrix2;
s21_create_matrix(3, 3, &matrix);
s21_create_matrix(3, 3, &matrix2);
for (int i = 0; i < 3; i++) {
    for(int j = 0; j < 3; j++) {
        matrix.matrix[i][j] = i + j + 0.00000000001;
        matrix2.matrix[i][j] = i + j + 0.00000000002;
    }
}
int res = s21_eq_matrix(&matrix, &matrix2);
s21_remove_matrix(&matrix);
s21_remove_matrix(&matrix2);
fail_unless(res == 1);

/////////////////////
#tcase s21_mult_number
#test test_s21_mult_number_01
matrix_t matrix;
matrix_t matrix2;
matrix_t matrix3;
double z = 2;
s21_create_matrix(3, 3, &matrix);
s21_create_matrix(3, 3, &matrix2);
s21_create_matrix(3, 3, &matrix3);
for (int i = 0; i < 3; i++) {
    for(int j = 0; j < 3; j++) {
        matrix.matrix[i][j] = 1;
    }
}
for (int i = 0; i < 3; i++) {
    for(int j = 0; j < 3; j++) {
        matrix2.matrix[i][j] = 2;
    }
}
s21_mult_number(&matrix, z, &matrix3);
int res = s21_eq_matrix(&matrix3, &matrix2);
s21_remove_matrix(&matrix);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&matrix3);
fail_unless(res == 1);

/////////////////////
#tcase s21_sum_matrix
#test test_s21_sum_matrix_01
matrix_t matrix;
matrix_t matrix2;
matrix_t matrix3;
matrix_t matrix4;
s21_create_matrix(3, 3, &matrix);
s21_create_matrix(3, 3, &matrix2);
s21_create_matrix(3, 3, &matrix3);
s21_create_matrix(3, 3, &matrix4);
for (int i = 0; i < 3; i++) {
    for(int j = 0; j < 3; j++) {
        matrix.matrix[i][j] = 1;
    }
}
for (int i = 0; i < 3; i++) {
    for(int j = 0; j < 3; j++) {
        matrix2.matrix[i][j] = 2;
    }
}
for (int i = 0; i < 3; i++) {
    for(int j = 0; j < 3; j++) {
        matrix3.matrix[i][j] = 3;
    }
}
s21_sum_matrix(&matrix, &matrix2, &matrix4);
int res = s21_eq_matrix(&matrix3, &matrix4);
s21_remove_matrix(&matrix);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&matrix3);
s21_remove_matrix(&matrix4);
fail_unless(res == 1);

#test test_s21_sum_matrix_02
matrix_t matrix;
matrix_t matrix2;
matrix_t matrix3;
matrix_t matrix4;
s21_create_matrix(4, 4, &matrix);
s21_create_matrix(3, 3, &matrix2);
s21_create_matrix(3, 3, &matrix3);
s21_create_matrix(3, 3, &matrix4);
for (int i = 0; i < 4; i++) {
    for(int j = 0; j < 4; j++) {
        matrix.matrix[i][j] = 1;
    }
}
for (int i = 0; i < 3; i++) {
    for(int j = 0; j < 3; j++) {
        matrix2.matrix[i][j] = 2;
    }
}
for (int i = 0; i < 3; i++) {
    for(int j = 0; j < 3; j++) {
        matrix3.matrix[i][j] = 3;
    }
}
s21_sum_matrix(&matrix, &matrix2, &matrix4);
int res = s21_eq_matrix(&matrix3, &matrix4);
s21_remove_matrix(&matrix);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&matrix3);
s21_remove_matrix(&matrix4);
fail_unless(res == 0);

/////////////////////
#tcase s21_sub_matrix
#test test_s21_sub_matrix_01
matrix_t matrix;
matrix_t matrix2;
matrix_t matrix3;
matrix_t matrix4;
s21_create_matrix(3, 3, &matrix);
s21_create_matrix(3, 3, &matrix2);
s21_create_matrix(3, 3, &matrix3);
s21_create_matrix(3, 3, &matrix4);
for (int i = 0; i < 3; i++) {
    for(int j = 0; j < 3; j++) {
        matrix.matrix[i][j] = 1;
    }
}
for (int i = 0; i < 3; i++) {
    for(int j = 0; j < 3; j++) {
        matrix2.matrix[i][j] = 2;
    }
}
for (int i = 0; i < 3; i++) {
    for(int j = 0; j < 3; j++) {
        matrix3.matrix[i][j] = -1;
    }
}
s21_sub_matrix(&matrix, &matrix2, &matrix4);
int res = s21_eq_matrix(&matrix3, &matrix4);
s21_remove_matrix(&matrix);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&matrix3);
s21_remove_matrix(&matrix4);
fail_unless(res == 1);

/////////////////////
#tcase s21_mult_matrix
#test test_s21_mult_matrix_01
matrix_t matrix;
matrix_t matrix2;
matrix_t matrix3;
s21_create_matrix(3, 3, &matrix);
s21_create_matrix(3, 3, &matrix2);
s21_create_matrix(3, 3, &matrix3);
for (int i = 0; i < 3; i++) {
    for(int j = 0; j < 3; j++) {
        matrix.matrix[i][j] = i + j;
        matrix2.matrix[i][j] = i + j;
    }
}
int res = s21_mult_matrix(&matrix, &matrix2, &matrix3);
s21_remove_matrix(&matrix);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&matrix3);
fail_unless(res == 0);

#test test_s21_mult_matrix_02
matrix_t matrix;
matrix_t matrix2;
matrix_t matrix3;
s21_create_matrix(3, 3, &matrix);
s21_create_matrix(4, 4, &matrix2);
s21_create_matrix(3, 3, &matrix3);
for (int i = 0; i < 3; i++) {
    for(int j = 0; j < 3; j++) {
        matrix.matrix[i][j] = i + j;
    }
}
for (int i = 0; i < 4; i++) {
    for(int j = 0; j < 4; j++) {
        matrix2.matrix[i][j] = i + j;
    }
}
int res = s21_mult_matrix(&matrix, &matrix2, &matrix3);
s21_remove_matrix(&matrix);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&matrix3);
fail_unless(res == 2);

/////////////////////
#tcase s21_transpose
#test test_s21_transpose_01
matrix_t matrix;
matrix_t matrix2;
s21_create_matrix(4, 4, &matrix);
for (int i = 0; i < 4; i++) {
    for(int j = 0; j < 4; j++) {
        matrix.matrix[i][j] = i + j;
    }
}
int res = s21_transpose(&matrix, &matrix2);
s21_remove_matrix(&matrix);
s21_remove_matrix(&matrix2);
fail_unless(res == 0);

/////////////////////
#tcase s21_calc_complements
#test test_s21_calc_complements_01
matrix_t matrix;
matrix_t matrix2;
s21_create_matrix(4, 4, &matrix);
for (int i = 0; i < 4; i++) {
    for(int j = 0; j < 4; j++) {
        matrix.matrix[i][j] = i + j;
    }
}
int res = s21_calc_complements(&matrix, &matrix2);
s21_remove_matrix(&matrix);
s21_remove_matrix(&matrix2);
fail_unless(res == 0);

#test test_s21_calc_complements_02
matrix_t matrix;
matrix_t matrix2;
s21_create_matrix(4, 4, &matrix);
int count = 0;
for (int i = 0; i < 4; i++) {
    for(int j = 0; j < 4; j++) {
        if (i == 0 && j == 0) count = 1;
        if (i == 0 && j == 1) count = 1;
        if (i == 3 && j == 3) count = 2;
        matrix.matrix[i][j] = count;
        count++;
    }
}

// for (int i = 0; i < 4; i++) {
//     for(int j = 0; j < 4; j++) {
//         printf("%.lf\t", matrix.matrix[i][j]);
//     }
//     printf("\n");
// }

int res = s21_calc_complements(&matrix, &matrix2);
s21_remove_matrix(&matrix);
s21_remove_matrix(&matrix2);
fail_unless(res == 0);

/////////////////////
#tcase s21_determinant
#test test_s21_determinant_01
matrix_t matrix;
s21_create_matrix(4, 4, &matrix);
for (int i = 0; i < 4; i++) {
    for(int j = 0; j < 4; j++) {
        matrix.matrix[i][j] = i + j;
    }
}
double d;
int res = s21_determinant(&matrix, &d);
s21_remove_matrix(&matrix);
fail_unless(res == 0);

#test test_s21_determinant_02
matrix_t matrix;
s21_create_matrix(4, 3, &matrix);
for (int i = 0; i < 4; i++) {
    for(int j = 0; j < 3; j++) {
        matrix.matrix[i][j] = i + j;
    }
}
double d;
int res = s21_determinant(&matrix, &d);
s21_remove_matrix(&matrix);
fail_unless(res == 2);

/////////////////////
#tcase s21_inverse_matrix
#test test_s21_inverse_matrix_01
matrix_t matrix;
matrix_t matrix2;
s21_create_matrix(4, 4, &matrix);
int count = 0;
for (int i = 0; i < 4; i++) {
    for(int j = 0; j < 4; j++) {
        if (i == 0 && j == 0) count = 1;
        if (i == 1 && j == 1) count = 1;
        if (i == 3 && j == 3) count = 2;
        matrix.matrix[i][j] = count;
        count++;
    }
}

int res = s21_inverse_matrix(&matrix, &matrix2);
s21_remove_matrix(&matrix);
s21_remove_matrix(&matrix2);
fail_unless(res == 0);

#test test_s21_inverse_matrix_02
matrix_t matrix;
matrix_t matrix2;
s21_create_matrix(4, 4, &matrix);
int count = 0;
for (int i = 0; i < 4; i++) {
    for(int j = 0; j < 4; j++) {
        if (i == 0 && j == 0) count = 1;
        if (i == 3 && j == 3) count = 2;
        matrix.matrix[i][j] = count;
        count++;
    }
}

int res = s21_inverse_matrix(&matrix, &matrix2);
s21_remove_matrix(&matrix);
fail_unless(res);